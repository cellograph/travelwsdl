'use strict';

const store = require('@graphql-mesh/store');
const soap = require('@omnigraph/soap');
const utils = require('@graphql-mesh/utils');
const utils$1 = require('@graphql-tools/utils');
const graphql = require('graphql');

class SoapHandler {
    constructor({ config, store: store$1, baseDir, importFn, logger }) {
        this.config = config;
        this.soapSDLProxy = store$1.proxy('schemaWithAnnotations.graphql', store.PredefinedProxyOptions.StringWithoutValidation);
        this.baseDir = baseDir;
        this.importFn = importFn;
        this.logger = logger;
    }
    async getMeshSource({ fetchFn }) {
        const soapSDL = await this.soapSDLProxy.getWithSet(async () => {
            const soapLoader = new soap.SOAPLoader({
                fetch: fetchFn,
            });
            const location = this.config.wsdl;
            const wsdl = await utils.readFileOrUrl(location, {
                allowUnknownExtensions: true,
                cwd: this.baseDir,
                fetch: fetchFn,
                importFn: this.importFn,
                logger: this.logger,
            });
            const object = await soapLoader.loadWSDL(wsdl);
            soapLoader.loadedLocations.set(location, object);
            const schema = soapLoader.buildSchema();
            return utils$1.printSchemaWithDirectives(schema);
        });
        const schemaAST = graphql.parse(soapSDL);
        const executor = soap.createExecutorFromSchemaAST(schemaAST, fetchFn);
        const schema = graphql.buildASTSchema(schemaAST);
        return {
            schema,
            executor,
        };
    }
}

module.exports = SoapHandler;
